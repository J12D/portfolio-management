fx <- assets[["fx"]]
assets <- merge.xts(GDAXI, DJI, N225, VXX)["2009-01-30/"] %>% na.locf
colnames(assets) <- c("DAX", "Dow Jones", "Nikkei", "VIX")
asset_returns <- assets %>% ROC(type = "discrete")
returns <- merge.xts(asset_returns, Euribor = euribor)["2009-02-02/"] %>% na.omit
factors <- factors["2009-02-02/"] %>% na.omit
fx <- fx["2009-02-02/"]
rm(list = c("GDAXI", "DJI", "N225", "VXX", "asset_returns", "euribor"))
cat("> Imported data ---------------")
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
# Erstelle den gg-Plot eines XTS Objekts
plotXTS <- function(xtsObject, title, xlab = "time", ylab = "value"){
d <- data.frame(time = index(xtsObject), value = drop(coredata(xtsObject)))
if (dim(xtsObject)[2]) {
d <- melt(d, id.vars = "time", varnames = names(dimnames(xtsObject)))
}
temp <- ggplot(d, aes(time, value)) +
xlab(xlab) +
ylab(ylab) +
scale_colour_hue() +
theme(plot.title = element_text(lineheight = .8, face = "bold"), text = element_text(size = 14))
if (dim(xtsObject)[2] > 1) {
temp <- temp + geom_line(aes(colour = variable))
}
else {
temp <- temp + geom_line(colour = gg_color_hue(1))
}
if (!missing(title)) {
temp + ggtitle(title)
}
else {
temp
}
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
xts2df <- function(xts) {
stopifnot(is.xts(xts))
data.frame(time = index(xts),drop(coredata(xts)))
}
df2xts <- function(df) {
stopifnot(is.data.frame(df))
xts(df[,("time" != colnames(df))],df[,("time" == colnames(df))])
}
library(magrittr)
library(quantmod)
library(Quandl)
library(lubridate)
Sys.setenv(TZ = "UTC")
# -- Indices -------------------
# getSymbols(c("^GDAXI","^DJI","^N225","VXX"),from="1995-01-01")
# -- EURIBOR -------------------
### no  euribor <- Quandl("ECB/RTD_M_S0_N_C_EUR3M_E")
# euribor <- Quandl("BOF/QS_D_IEUTIO3M")
# euribor <- xts(euribor[,-1]/100,euribor[,1])
# -- Factors -------------------
# factors <- read.csv("data/factors.csv")
# factors$X %<>% parse_date_time("%Y%m%d")
# factors <- xts(factors[,-1]/100,factors[,1])["1995/"]
# -- FX -------------------
# eurusd_0 <- getFX("EUR/USD", from = "2008-01-01", to = "2011-01-01", auto.assign = F)
# eurusd_1 <- getFX("EUR/USD", from = "2011-01-02", auto.assign = F)
# eurusd <- rbind(eurusd_0, eurusd_1)
#
# eurjpy_0 <- getFX("EUR/JPY", from = "2008-01-01", to = "2011-01-01", auto.assign = F)
# eurjpy_1 <- getFX("EUR/JPY", from = "2011-01-02", auto.assign = F)
# eurjpy <- rbind(eurjpy_0, eurjpy_1)
#
# fx <- merge.xts(eurusd, eurjpy)
# saveRDS(list(GDAXI=GDAXI, DJI=DJI, N225=N225, VXX=VXX, euribor=euribor, factors=factors, fx=fx),"data/assets")
assets <- readRDS("data/assets")
GDAXI <- assets[["GDAXI"]][,"GDAXI.Adjusted"]
DJI <- assets[["DJI"]][,"DJI.Adjusted"]
N225 <- assets[["N225"]][,"N225.Adjusted"]
VXX <- assets[["VXX"]][,"VXX.Adjusted"]
euribor <- assets[["euribor"]]/252
factors <- assets[["factors"]]
fx <- assets[["fx"]]
assets <- merge.xts(GDAXI, DJI, N225, VXX)["2009-01-30/"] %>% na.locf
colnames(assets) <- c("DAX", "Dow Jones", "Nikkei", "VIX")
asset_returns <- assets %>% ROC(type = "discrete")
returns <- merge.xts(asset_returns, Euribor = euribor)["2009-02-02/"] %>% na.omit
factors <- factors["2009-02-02/"] %>% na.omit
fx <- fx["2009-02-02/"]
rm(list = c("GDAXI", "DJI", "N225", "VXX", "asset_returns", "euribor"))
cat("> Imported data ---------------")
library(magrittr)
library(quantmod)
library(Quandl)
library(lubridate)
Sys.setenv(TZ = "UTC")
# -- Indices -------------------
# getSymbols(c("^GDAXI","^DJI","^N225","VXX"),from="1995-01-01")
# -- EURIBOR -------------------
### no  euribor <- Quandl("ECB/RTD_M_S0_N_C_EUR3M_E")
# euribor <- Quandl("BOF/QS_D_IEUTIO3M")
# euribor <- xts(euribor[,-1]/100,euribor[,1])
# -- Factors -------------------
# factors <- read.csv("data/factors.csv")
# factors$X %<>% parse_date_time("%Y%m%d")
# factors <- xts(factors[,-1]/100,factors[,1])["1995/"]
# -- FX -------------------
# eurusd_0 <- getFX("EUR/USD", from = "2008-01-01", to = "2011-01-01", auto.assign = F)
# eurusd_1 <- getFX("EUR/USD", from = "2011-01-02", auto.assign = F)
# eurusd <- rbind(eurusd_0, eurusd_1)
#
# eurjpy_0 <- getFX("EUR/JPY", from = "2008-01-01", to = "2011-01-01", auto.assign = F)
# eurjpy_1 <- getFX("EUR/JPY", from = "2011-01-02", auto.assign = F)
# eurjpy <- rbind(eurjpy_0, eurjpy_1)
#
# fx <- merge.xts(eurusd, eurjpy)
# saveRDS(list(GDAXI=GDAXI, DJI=DJI, N225=N225, VXX=VXX, euribor=euribor, factors=factors, fx=fx),"data/assets")
assets <- readRDS("data/assets")
GDAXI <- assets[["GDAXI"]][,"GDAXI.Adjusted"]
DJI <- assets[["DJI"]][,"DJI.Adjusted"]
N225 <- assets[["N225"]][,"N225.Adjusted"]
VXX <- assets[["VXX"]][,"VXX.Adjusted"]
euribor <- assets[["euribor"]]/252
factors <- assets[["factors"]]
fx <- assets[["fx"]]
assets <- merge.xts(GDAXI, DJI, N225, VXX)["2009-01-30/"] %>% na.locf
colnames(assets) <- c("DAX", "Dow Jones", "Nikkei", "VIX")
asset_returns <- assets %>% ROC(type = "discrete")
returns <- merge.xts(asset_returns, Euribor = euribor)["2009-02-02/"] %>% na.omit
factors <- factors["2009-02-02/"] %>% na.omit
fx <- fx["2009-02-02/"]
rm(list = c("GDAXI", "DJI", "N225", "VXX", "asset_returns", "euribor"))
cat("> Imported data ---------------")
install.packages("quant")
library(magrittr)
library(quantmod)
library(Quandl)
library(lubridate)
Sys.setenv(TZ = "UTC")
# -- Indices -------------------
# getSymbols(c("^GDAXI","^DJI","^N225","VXX"),from="1995-01-01")
# -- EURIBOR -------------------
### no  euribor <- Quandl("ECB/RTD_M_S0_N_C_EUR3M_E")
# euribor <- Quandl("BOF/QS_D_IEUTIO3M")
# euribor <- xts(euribor[,-1]/100,euribor[,1])
# -- Factors -------------------
# factors <- read.csv("data/factors.csv")
# factors$X %<>% parse_date_time("%Y%m%d")
# factors <- xts(factors[,-1]/100,factors[,1])["1995/"]
# -- FX -------------------
# eurusd_0 <- getFX("EUR/USD", from = "2008-01-01", to = "2011-01-01", auto.assign = F)
# eurusd_1 <- getFX("EUR/USD", from = "2011-01-02", auto.assign = F)
# eurusd <- rbind(eurusd_0, eurusd_1)
#
# eurjpy_0 <- getFX("EUR/JPY", from = "2008-01-01", to = "2011-01-01", auto.assign = F)
# eurjpy_1 <- getFX("EUR/JPY", from = "2011-01-02", auto.assign = F)
# eurjpy <- rbind(eurjpy_0, eurjpy_1)
#
# fx <- merge.xts(eurusd, eurjpy)
# saveRDS(list(GDAXI=GDAXI, DJI=DJI, N225=N225, VXX=VXX, euribor=euribor, factors=factors, fx=fx),"data/assets")
assets <- readRDS("data/assets")
GDAXI <- assets[["GDAXI"]][,"GDAXI.Adjusted"]
DJI <- assets[["DJI"]][,"DJI.Adjusted"]
N225 <- assets[["N225"]][,"N225.Adjusted"]
VXX <- assets[["VXX"]][,"VXX.Adjusted"]
euribor <- assets[["euribor"]]/252
factors <- assets[["factors"]]
fx <- assets[["fx"]]
assets <- merge.xts(GDAXI, DJI, N225, VXX)["2009-01-30/"] %>% na.locf
colnames(assets) <- c("DAX", "Dow Jones", "Nikkei", "VIX")
asset_returns <- assets %>% ROC(type = "discrete")
returns <- merge.xts(asset_returns, Euribor = euribor)["2009-02-02/"] %>% na.omit
factors <- factors["2009-02-02/"] %>% na.omit
fx <- fx["2009-02-02/"]
rm(list = c("GDAXI", "DJI", "N225", "VXX", "asset_returns", "euribor"))
cat("> Imported data ---------------")
library(readxl)
library(dplyr)
library(magrittr)
library(quantmod)
source("0-helper.R")
Sys.setenv(tz = "UTC")
price_ <- read_excel("SwissAirAktie.xls", skip = 1, na = "#N/A N/A",col_types = c("date","numeric","numeric","numeric")) %>% as.data.frame
price_ <- xts(price_[,-1], as.Date(price_[,1]))
colnames(price_) <- c("Last", "Last_Actual", "Mid")
price <- price_$Last
returns <- xts(NULL)
returns$continuous <- ROC(price)
returns$discrete <- ROC(price, type = "discrete")
returns %<>% na.omit
price0 <- price['1996-08-02/1999-12-31']
price1 <- price['1996-08-02/2001-10-29']
price0 %>% chartSeries
price1 %>% chartSeries
returns0 <- returns['1996-08-02/1999-12-31']$discrete
returns1 <- returns['1996-08-02/2001-10-29']$discrete
-returns0 %>% chartSeries
-returns1 %>% plotXTS(ylim = c(-0.5,1))
price$Last %>% chartSeries
returns$discrete %>% chartSeries
message("Imported data --------------------------")
qqplot(price1)
qqplot(prices1)
library(readxl)
library(dplyr)
library(magrittr)
library(quantmod)
source("0-helper.R")
Sys.setenv(tz = "UTC")
price_ <- read_excel("SwissAirAktie.xls", skip = 1, na = "#N/A N/A",col_types = c("date","numeric","numeric","numeric")) %>% as.data.frame
price_ <- xts(price_[,-1], as.Date(price_[,1]))
colnames(price_) <- c("Last", "Last_Actual", "Mid")
price <- price_$Last
returns <- xts(NULL)
returns$continuous <- ROC(price)
returns$discrete <- ROC(price, type = "discrete")
returns %<>% na.omit
price0 <- price['1996-08-02/1999-12-31']
price1 <- price['1996-08-02/2001-10-29']
price0 %>% chartSeries
price1 %>% chartSeries
returns0 <- returns['1996-08-02/1999-12-31']$discrete
returns1 <- returns['1996-08-02/2001-10-29']$discrete
-returns0 %>% chartSeries
-returns1 %>% plotXTS(ylim = c(-0.5,1))
price$Last %>% chartSeries
returns$discrete %>% chartSeries
message("Imported data --------------------------")
qqplot(price1)
price1
library(readxl)
library(dplyr)
library(magrittr)
library(quantmod)
source("0-helper.R")
Sys.setenv(tz = "UTC")
price_ <- read_excel("SwissAirAktie.xls", skip = 1, na = "#N/A N/A",col_types = c("date","numeric","numeric","numeric")) %>% as.data.frame
price_ <- xts(price_[,-1], as.Date(price_[,1]))
colnames(price_) <- c("Last", "Last_Actual", "Mid")
price <- price_$Last
returns <- xts(NULL)
returns$continuous <- ROC(price)
returns$discrete <- ROC(price, type = "discrete")
returns %<>% na.omit
price0 <- price['1996-08-02/1999-12-31']
price1 <- price['1996-08-02/2001-10-29']
price0 %>% chartSeries
price1 %>% chartSeries
returns0 <- returns['1996-08-02/1999-12-31']$discrete
returns1 <- returns['1996-08-02/2001-10-29']$discrete
-returns0 %>% chartSeries
-returns1 %>% plotXTS(ylim = c(-0.5,1))
price$Last %>% chartSeries
returns$discrete %>% chartSeries
message("Imported data --------------------------")
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
# convenience function for ggploting xts objects
plotXTS <- function(xtsObject, title, xlab = "time", ylab = "value", size = 0.5, ...){
d <- data.frame(time = index(xtsObject), value = drop(coredata(xtsObject)))
if (dim(xtsObject)[2]) {
d <- melt(d, id.vars = "time", varnames = names(dimnames(xtsObject)))
}
res_plot <- ggplot(d, aes(time, value)) +
xlab(xlab) +
ylab(ylab) +
scale_colour_hue() +
theme(plot.title = element_text(lineheight = .8, face = "bold"), text = element_text(size = 14))
if (dim(xtsObject)[2] > 1) {
res_plot <- res_plot + geom_line(aes(colour = variable), size = size, ...)
}
else {
res_plot <- res_plot + geom_line(colour = gg_color_hue(1), size = size, ...)
}
if (!missing(title)) {
res_plot + ggtitle(title)
}
else {
res_plot
}
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots == 1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
plotTable <- function(object, name){
if (is.xts(object)) {
object <- data.frame(time = index(object), value = drop(coredata(object)))
}
path <- paste(name, ".txt", sep = "")
write.table(object, path, sep = " ", row.names = F, quote = F, na = "nan")
}
xts2df <- function(xts) {
stopifnot(is.xts(xts))
data.frame(time = index(xts), drop(coredata(xts)))
}
df2xts <- function(df) {
stopifnot(is.data.frame(df))
xts(df[,("time" != colnames(df))],df[,("time" == colnames(df))])
}
ones <- function(num) {
rep.int(1, num)
}
zeros <- function(num) {
rep.int(0, num)
}
library(readxl)
library(dplyr)
library(magrittr)
library(quantmod)
source("0-helper.R")
Sys.setenv(tz = "UTC")
price_ <- read_excel("SwissAirAktie.xls", skip = 1, na = "#N/A N/A",col_types = c("date","numeric","numeric","numeric")) %>% as.data.frame
price_ <- xts(price_[,-1], as.Date(price_[,1]))
colnames(price_) <- c("Last", "Last_Actual", "Mid")
price <- price_$Last
returns <- xts(NULL)
returns$continuous <- ROC(price)
returns$discrete <- ROC(price, type = "discrete")
returns %<>% na.omit
price0 <- price['1996-08-02/1999-12-31']
price1 <- price['1996-08-02/2001-10-29']
price0 %>% chartSeries
price1 %>% chartSeries
returns0 <- returns['1996-08-02/1999-12-31']$discrete
returns1 <- returns['1996-08-02/2001-10-29']$discrete
-returns0 %>% chartSeries
-returns1 %>% plotXTS(ylim = c(-0.5,1))
price$Last %>% chartSeries
returns$discrete %>% chartSeries
message("Imported data --------------------------")
price1
price_
library(fGarch)
library(magrittr)
library(ggplot2)
source("0-data.R")
## ---- General Analysis ---------------
par(ask = F)
price %>% chartSeries
returns['/2001-10-29']$discrete %>% plotXTS
qplot(returns %>% as.vector, geom = "histogram", xlim = c(-0.25,0.25), binwidth = 0.005)
## ---- GARCH ---------------
garch <- function(q=99.9E-2) {
function(prices) {
returns <- prices %>% ROC(type = "discrete") %>% na.omit
res <- garchFit(~garch(1,1), data = returns, trace = F)
forecast <- predict(res,1)
mu <- forecast$meanForecast %>% as.numeric
sigma <- forecast$standardDeviation %>% as.numeric
-(prices[length(prices)]) * qnorm(1 - q, mu, sigma)
}
}
## ---- Delta-Normal ----------------
delta_normal <- function(q=99.9E-2) {
function(prices) {
returns <- prices %>% ROC(type = "discrete") %>% na.omit
mu <- returns %>% mean
sigma <- returns %>% sd
-(prices[length(prices)]) * qnorm(1 - q, mu, sigma)
}
}
## ---- Empirical ---------------
empirical <- function(q=99.9E-2) {
function(prices) {
returns <- prices %>% ROC(type = "discrete") %>% na.omit
price_today <- prices[length(prices)]
(-price_today * returns) %>% quantile(q)
}
}
## ---- EWMA --------------------
ewma <- function(q=99.9E-2, lambda=0.94) {
function(prices) {
returns <- prices %>% ROC %>% na.omit
price_today <- prices[length(prices)]
vol <- (1-lambda) * lambda ^ ((length(returns) - 1):0) %*% returns^2
#(-price_today * returns) %>% quantile(q)
}
}
## ---- Model evaluation ---------------
evaluate_model <- function(model, lookback = "1 year", skip = 200) {
vars <- index(price) %>%
.[-(1:skip)] %>%
lapply(function(date) price[paste0("/",date)]) %>%
lapply(function(prices) {
date <- prices %>% index %>% .[length(prices)] %>% as.Date
prices <- prices %>% xts::last(lookback)
val <- model(prices)
xts(val, date)
}) %>%
Reduce(rbind,.)
vars
}
## ---- Work with models ---------------
funs <- list(delta_normal, empirical, evt, garch)
results <- funs %>% lapply(function(model)evaluate_model(model(99E-2), "4 years", 800))
delta_normal_var <- evaluate_model(delta_normal(99E-2),"3 years")
(delta_normal_var/price) %>% chartSeries
empirical_var <- evaluate_model(empirical(99E-2))
(empirical_var/price) %>% plotXTS
evt_var <- evaluate_model(evt(99E-2), "4 years", 800)
(evt_var/price) %>% plotXTS
garch_var <- evaluate_model(garch(99E-2), "4 years", 800)
(garch_var/price) %>% plotXTS
vars <- merge.xts((evt_var/price), (empirical_var/price), (delta_normal_var/price), (garch_var/price))
colnames(vars) <- c("EVT", "Historical", "DeltaNormal", "GARCH")
vars %>% plotXTS(size = 1)
vars %>% plotTable("plot-data/vars")
price_ <- read_excel("SwissAirAktie.xls", skip = 1, na = "#N/A N/A",col_types = c("date","numeric","numeric","numeric")) %>% as.data.frame
setwd("C:/")
setwd("C:/Users/nicol_000/Documents/GitHub/risk-modelling")
library(readxl)
library(dplyr)
library(magrittr)
library(quantmod)
source("0-helper.R")
Sys.setenv(tz = "UTC")
price_ <- read_excel("SwissAirAktie.xls", skip = 1, na = "#N/A N/A",col_types = c("date","numeric","numeric","numeric")) %>% as.data.frame
price_ <- xts(price_[,-1], as.Date(price_[,1]))
colnames(price_) <- c("Last", "Last_Actual", "Mid")
price <- price_$Last
returns <- xts(NULL)
returns$continuous <- ROC(price)
returns$discrete <- ROC(price, type = "discrete")
returns %<>% na.omit
price0 <- price['1996-08-02/1999-12-31']
price1 <- price['1996-08-02/2001-10-29']
price0 %>% chartSeries
price1 %>% chartSeries
returns0 <- returns['1996-08-02/1999-12-31']$discrete
returns1 <- returns['1996-08-02/2001-10-29']$discrete
-returns0 %>% chartSeries
-returns1 %>% plotXTS(ylim = c(-0.5,1))
price$Last %>% chartSeries
returns$discrete %>% chartSeries
message("Imported data --------------------------")
qqplot(price1)
qqplot(returns0)
qqplot
returns1
qqplot(returns1)
qqplot(returns1,y)
qqnorm(returns1)
qqline(returns1)
qqnorm(returns0)
qqline(returns0)
qqnorm(returns0)
qqline(returns0)
qqnorm(returns0)
qqline(returns1)
qqline(returns1)
qqnorm(returns0)
qqnorm(returns0)
qqnorm(returns1)
qqline(returns1)
qqnorm(returns0)
qqline(returns0)
qqnorm(returns0)
qqline(returns0)
qqnorm(returns1)
qqline(returns1)
setwd("C:/Users/nicol_000/SkyDrive/Dokumente/Studium/Frankfurt School/Master/2nd semester/International Portfolio Management/Project/R/portfolio-management")
